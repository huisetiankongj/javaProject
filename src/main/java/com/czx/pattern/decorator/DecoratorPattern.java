package com.czx.pattern.decorator;
/**
 * 装饰模式
 * 		在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。
 * 特点：
 * 	       （1） 装饰对象和真实对象有相同的接口。这样客户端对象就能以和真实对象相同的方式和装饰对象交互。
 * 	       （2） 装饰对象包含一个真实对象的引用（reference）
 * 	       （3） 装饰对象接受所有来自客户端的请求。它把这些请求转发给真实的对象。
 * 	       （4） 装饰对象可以在转发这些请求以前或以后增加一些附加功能。这样就确保了在运行时，
 * 		不用修改给定对象的结构就可以在外部增加附加的功能。在面向对象的设计中，通常是通过继承来实现对给定类的功能扩展。
 * 缺点：
 * 		1. 这种比继承更加灵活机动的特性，也同时意味着更加多的复杂性。
 * 		2. 装饰模式会导致设计中出现许多小类，如果过度使用，会使程序变得很复杂。
 * 		3. 装饰模式是针对抽象组件（Component）类型编程。但是，如果你要针对具体组件编程时，就应该重新思考你的应用架构，以及装饰者是否合适。
 * 		当然也可以改变Component接口，增加新的公开的行为，实现“半透明”的装饰者模式。
 * 
 * 对比：
 * 		装饰者与适配者模式的区别
 * 			1.关于新职责：适配器也可以在转换时增加新的职责，但主要目的不在此。装饰者模式主要是给被装饰者增加新职责的。
 * 			2.关于原接口：适配器模式是用新接口来调用原接口，原接口对新系统是不可见或者说不可用的。
 * 			装饰者模式原封不动的使用原接口，系统对装饰的对象也通过原接口来完成使用。
 * 			（增加新接口的装饰者模式可以认为是其变种--“半透明”装饰者）
 * 			3.关于其包裹的对象：适配器是知道被适配者的详细情况的（就是那个类或那个接口）。
 * 			装饰者只知道其接口是什么，至于其具体类型（是基类还是其他派生类）只有在运行期间才知道。
 * @author admin
 *
 */
public class DecoratorPattern {

}
